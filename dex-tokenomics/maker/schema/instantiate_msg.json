{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure stores general parameters for the contract.",
  "type": "object",
  "required": [
    "astro_token_contract",
    "factory_contract",
    "owner",
    "staking_contract"
  ],
  "properties": {
    "astro_token_contract": {
      "description": "The ASTRO token contract address",
      "type": "string"
    },
    "factory_contract": {
      "description": "The factory contract address",
      "type": "string"
    },
    "governance_contract": {
      "description": "The governance contract address (fee distributor for vxASTRO)",
      "type": [
        "string",
        "null"
      ]
    },
    "governance_percent": {
      "description": "The percentage of fees that go to governance_contract",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "max_spread": {
      "description": "The maximum spread used when swapping fee tokens to ASTRO",
      "anyOf": [
        {
          "$ref": "#/definitions/Decimal"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "description": "Address that's allowed to change contract parameters",
      "type": "string"
    },
    "staking_contract": {
      "description": "The xASTRO staking contract address",
      "type": "string"
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
